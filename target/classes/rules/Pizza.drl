package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.Fakt;
import pl.poznan.put.cs.si.puttalky.Zamowienie; 
import pl.poznan.put.cs.si.puttalky.Ciasto;
import pl.poznan.put.cs.si.puttalky.Dodatek;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set
import java.lang.reflect.Array
import java.util.Arrays
import org.semanticweb.owlapi.model.IRI
<<<<<<< Updated upstream
import java.util.List
import java.util.ArrayList
import java.lang.String;
=======
import java.util.ArrayList;
>>>>>>> Stashed changes


/** Author: agalawrynowicz<br>
 * Date: 19-Dec-2016 */

rule "start"
	salience 5
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

<<<<<<< Updated upstream
//TODO: Improve seatching using a pizza type
rule "Zamow nazwana pizze"
    salience 3
=======
rule "Nazwa lub typ"
    salience 4
>>>>>>> Stashed changes

    when
        not Fakt(nazwa == "nazwaLubTyp")
        not Fakt(nazwa == "nazwanaPizza")
        pizza: Pizza()
        parser: Parser()
    then
        pizza.setMonit("Czy chcesz zamówić pizzę po nazwie lub typie?");
        pizza.zadajPytanie();
        parser.przetworzOdpowiedz();

        if(Arrays.asList(parser.getSlowaKluczowe()).contains("tak") ||
           Arrays.asList(parser.getSlowaKluczowe()).contains("Tak") ||
           Arrays.asList(parser.getSlowaKluczowe()).contains("TAK")){
            insert(new Fakt("nazwaLubTyp", null));
        }

        update(pizza);
end

rule "Znajdz pizze o podanym typie lub nazwie"
    salience 3

    when
        Fakt(nazwa == "nazwaLubTyp")
        not Fakt(nazwa == "nazwanaPizza")
        not Fakt(nazwa == "typPizzy")
        pizza: Pizza()
        parser: Parser()
        baza: BazaWiedzy()
    then
        pizza.setMonit("Podaj nazwe lub typ pizzy");
        pizza.zadajPytanie();
        parser.przetworzOdpowiedz();

        for (String slowo : parser.getSlowaKluczowe()){
             for (String uriKlasyNazwa : baza.dopasujNazwePizzy(slowo)) {
                insert(new Fakt("nazwanaPizza", uriKlasyNazwa));
             }

             for(String uriKlasyTyp: baza.dopasujTypPizzy(slowo)){
                insert(new Fakt("typPizzy", uriKlasyTyp));
             }
        }

        update(pizza);

end

rule "Podaj dodatki"
	salience 2
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
	    not Fakt(nazwa == "typPizzy") &&
		not Fakt(nazwa == "dodatek")
		not Fakt(nazwa == "dodatki")
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		  dodatek.setMonit("Jaki dodatek powinna zawierać Twoja pizza?:\n");
		  dodatek.zadajPytanie();
		  parser.przetworzOdpowiedz();
<<<<<<< Updated upstream

		List<String> dodatki = new ArrayList<>();
		for (String slowo : parser.getSlowaKluczowe())
		{
			for (String uriKlasy : baza.dopasujDodatek(slowo))
			{ // sprawdza czy dodatek znajduje sie w bazie, jesli tak to dodaje go do faktów
		        dodatki.add(uriKlasy);
=======
		 
		for (String slowo : parser.getSlowaKluczowe()){
			for (String uriKlasy : baza.dopasujDodatek(slowo)) {
		        insert(new Fakt("dodatek", uriKlasy));
>>>>>>> Stashed changes
		    }
		}
		if(dodatki.size() == 1)
		{
		   insert(new Fakt("dodatek", dodatki.get(0)));
		}
		else if(dodatki.size() > 1)
		{
		   insert(new Fakt("dodatki", dodatki));
		}
		else
		{
		    System.out.println("Dodatek nieznany\n");
		}
		    		
		//@TODO	brak dopasowania
		update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
	    not Fakt(nazwa == "typPizzy") &&
		not Fakt(nazwa == "rodzaj_ciasta")
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			if (slowo.equals("cienki")){
		       insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.equals("gruby")) {
		       insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
					
		//@TODO	brak dopasowania
		
		update(ciasto);
end

rule "Polecana pizza jeden dodatek"
	salience 1
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
	    not Fakt(nazwa == "typPizzy")
		Fakt(nazwa == "dodatek") && 
		Fakt(nazwa == "rodzaj_ciasta") && 	
		not Fakt(nazwa == "pizza_propozycja") &&
        $dodatek : Fakt( nazwa == "dodatek")
 		
		baza: BazaWiedzy()
		pizza: Pizza()
	then
        System.out.println("Jeden dodatek");
		Set<String> pizze = baza.wyszukajPizzePoDodatkach($dodatek.getWartosc());
            
        if (pizze.size()>1){            		
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	if (!nazwaPizzy.equals("Nothing")){
		    	    System.out.println("Polecam pizzę:"+nazwaPizzy);
		       	}
		    }
		}
		else {
			System.out.println("Przyjęto pizzę na specjalne zamówienie zawierającą dodatek " +
			$dodatek.getWartosc().replace("http://semantic.cs.put.poznan.pl/ontologie/pizza.owl#", "") +
			"\n");
	    }

end
rule "Pizza z wieloma dodatkami"
	salience 1

	when
	    not Fakt(nazwa == "nazwanaPizza") &&
		Fakt(nazwa == "dodatki") &&
		Fakt(nazwa == "rodzaj_ciasta") &&
		not Fakt(nazwa == "pizza_propozycja") &&
        $dodatki : Fakt( nazwa == "dodatki")

		baza: BazaWiedzy()
		pizza: Pizza()
	then

		Set<String> pizze = baza.wyszukajPizzePoLiscieDodatkow($dodatki.getDodatki());

        if (pizze.size()>1){
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	//System.out.println();
		    	if (!nazwaPizzy.equals("Nothing")){
		       	   System.out.println("Polecam pizzę:"+nazwaPizzy);
		       	}
		    }
		}
		else
		{
			System.out.println("Przyjęto pizzę na specjalne zamówienie zawierającą dodatki: ");
		    for(String dodatek : $dodatki.getDodatki())
		        {
		            System.out.println(dodatek);
		        }
	    }

<<<<<<< Updated upstream
=======
rule "Polecana pizza po nazwie"
    salience 1

    when 
        fakt: Fakt(nazwa == "nazwanaPizza")
    then
         System.out.println("Przyjęto zamówienie na pizzę o nazwie: " +
         fakt
         .getWartosc()
         .replace("http://semantic.cs.put.poznan.pl/ontologie/pizza.owl#", "")
         .replace(">", "")
          + "\n");
end

rule "Polecane pizze po typie"
    salience 1

    when
        fakt: Fakt(nazwa == "typPizzy")
        baza: BazaWiedzy()
    then
        ArrayList<String> polecanePizze = baza.wyszukajPizzePoTypie(fakt.getWartosc());

        if(polecanePizze.size() > 1){
            for(String nazwaPizzy: polecanePizze){
                if(!nazwaPizzy.equals("Nothing")){
                    System.out.println("Polecam pizzę:"+nazwaPizzy);
                }
            }
        }

>>>>>>> Stashed changes
end

rule "zakończenie"

	when
	    zamowienie : Zamowienie() &&
	    (Fakt(nazwa == "pizza_propozycja") ||
	    Fakt(nazwa == "nazwanaPizza") ||
	    Fakt(nazwa == "typPizzy"))
		not (Fakt(nazwa == "koniec"))

	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end

