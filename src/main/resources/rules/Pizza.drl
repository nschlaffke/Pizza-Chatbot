package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.Fakt;
import pl.poznan.put.cs.si.puttalky.Zamowienie; 
import pl.poznan.put.cs.si.puttalky.Ciasto;
import pl.poznan.put.cs.si.puttalky.Dodatek;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set
import java.lang.reflect.Array
import java.util.Arrays
import org.semanticweb.owlapi.model.IRI;


/** Author: agalawrynowicz<br>
 * Date: 19-Dec-2016 */

rule "start"
	salience 4
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

//TODO: Improve seatching using a pizza type
rule "Zamow nazwana pizze"
    salience 3

    when
        not Fakt(nazwa == "nazwanaPizza")
        pizza: Pizza()
        parser: Parser()
        baza: BazaWiedzy()
    then
        pizza.setMonit("Czy chcesz zamówić pizzę po nazwie lub typie?");
        pizza.zadajPytanie();
        parser.przetworzOdpowiedz();

        //dodac moze te odp do jakiejs stalej / do bazy
        if(Arrays.asList(parser.getSlowaKluczowe()).contains("tak") ||
        Arrays.asList(parser.getSlowaKluczowe()).contains("Tak") ||
        Arrays.asList(parser.getSlowaKluczowe()).contains("TAK")){
            pizza.setMonit("Podaj nazwe lub typ pizzy");
            pizza.zadajPytanie();
            parser.przetworzOdpowiedz();

            for (String slowo : parser.getSlowaKluczowe()){
                for (String uriKlasyNazwa : baza.dopasujNazwePizzy(slowo)) { // sprawdza czy dodatek znajduje sie w bazie, jesli tak to dodaje go do faktów
                    insert(new Fakt("nazwanaPizza", uriKlasyNazwa));
                }

                for(String uriKlasyTyp: baza.dopasujTypPizzy(slowo)){
                    insert(new Fakt("nazwanaPizza", uriKlasyTyp));
                }
            }

            update(pizza);
        }

end

rule "Podaj dodatki"
	salience 2
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
		not Fakt(nazwa == "dodatek")
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		  dodatek.setMonit("Jaki dodatek powinna zawierać Twoja pizza?:\n");
		  dodatek.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			for (String uriKlasy : baza.dopasujDodatek(slowo)) { // sprawdza czy dodatek znajduje sie w bazie, jesli tak to dodaje go do faktów
		        insert(new Fakt("dodatek", uriKlasy));
		    }
		}
		    		
		//@TODO	brak dopasowania
		update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
		not Fakt(nazwa == "rodzaj_ciasta")
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			if (slowo.equals("cienki")){
		       insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.equals("gruby")) {
		       insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
					
		//@TODO	brak dopasowania
		
		update(ciasto);
end

rule "Polecana pizza"
	salience 1
	
	when
	    not Fakt(nazwa == "nazwanaPizza") &&
		Fakt(nazwa == "dodatek") && 
		Fakt(nazwa == "rodzaj_ciasta") && 	
		not Fakt(nazwa == "pizza_propozycja") &&
        $dodatek : Fakt( nazwa == "dodatek")
 		
		baza: BazaWiedzy()
		pizza: Pizza()
	then

		Set<String> pizze = baza.wyszukajPizzePoDodatkach($dodatek.getWartosc());
            
        if (pizze.size()>1){            		
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	//System.out.println();
		    	if (!nazwaPizzy.equals("Nothing")){
		       	   System.out.println("Polecam pizzę:"+nazwaPizzy);
		       	}
		    }
		}
		else {
			System.out.println("Przyjęto pizzę na specjalne zamówienie zawierającą dodatek " +
			$dodatek.getWartosc().replace("http://semantic.cs.put.poznan.pl/ontologie/pizza.owl#", "") +
			"\n");
	    }

end


rule "zakończenie"

	when
	    zamowienie : Zamowienie() &&
	    (Fakt(nazwa == "pizza_propozycja") || Fakt(nazwa == "nazwanaPizza"))
		not (Fakt(nazwa == "koniec"))

	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end

